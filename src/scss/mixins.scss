
// // ПРИМЕР
// // Type 0
// // @include adaptive-value("padding", 50, 20, 0)
// // padding: calc (20px + (50-20) * ((100hw - 320px) / ("1920 -ширина макета" 1920 - 320)))

// $maxWidth: 1600;
// $maxwidthConteiner: 1200;

// @mixin adaptive-value($property, $startSize, $minSize, $type) {
// 	$addsize: $startSize - $minSize;

// 	@if $type==1 {
// 		//только если меньше контейнера
// 		#{$property}: $startSize + px;
// 		@media (max-width: #{$maxwidthConteiner + px}) {
// 			#{$property}: calc(#{$minSize + px} + #{$addsize} * ((100vw - 320px) / #{$maxwidthConteiner - 320}));
// 		}
// 	} @else if $type==2 {
// 		//только если больше контейнера
// 		#{$property}: $startSize + px;
// 		@media (min-width: #{$maxwidthConteiner + px}) {
// 			#{$property}: calc(#{$minSize + px} + #{$addsize + px} * ((100vw - 320px) / #{$maxWidth - 320}));
// 		}
// 	} @else {
// 		//всегда
// 		#{$property}: calc(#{$minSize + px} + #{$addsize} * ((100vw - 320px) / #{$maxWidth - 320}));
// 	}
// }

// // Перевод в адаптиыне единицы измерения===================================

// // ПРИМЕР
// // .title {
// // 	font-size: rem(42 "px");
// // }

// @function prc($pxOne, $pxTwo) {
// 	$result: calc($pxOne/$pxTwo) * 100%;
// 	@return $result;
// }

// @function rem($px) {
// 	$result: calc($px/$fontSize) + rem;
// 	@return $result;
// }

// @function em($px) {
// 	$result: calc($px/$fontSize) + em;
// 	@return $result;
// }

//Percent
@function percent($px, $from) {
	$result: calc($px / $from) * 100%;
	@return $result;
}
//REM
@function rem($px) {
	$result: calc($px / 16) + rem;
	@return $result;
}
//EM
@function em($px, $current: 16) {
	$result: calc($px / $current) + em;
	@return $result;
}
//Адаптивное свойство
@mixin adaptiveValue($property, $startSize, $minSize, $widthFrom: $containerWidth, $widthTo: $minWidth, $keepSize: 0) {
	@if ($startSize==0) {
		$startSize: 0.0001;
	}
	@if ($minSize==0) {
		$minSize: 0.0001;
	}

	// Для calc();
	$addSize: calc($startSize - $minSize / 16);

	@if ($widthFrom == $containerWidth and $maxWidthContainer == 0) {
		$widthFrom: $maxWidth;
	}

	// Брейк-поинты в EM
	$widthFromMedia: em($widthFrom);
	$widthToMedia: em($widthTo);

	// Формула плавающего значения
	// Источник: https://css-tricks.com/linearly-scale-font-size-with-css-clamp-based-on-the-viewport/
	$slope: calc(($startSize - $minSize) / ($widthFrom - $widthTo));
	$yIntersection: -$widthTo * $slope + $minSize;
	$flyValue: #{rem($yIntersection)}" + " #{$slope * 100}vw;

	// Получение значения свойства
	$propertyValue: #{"clamp(" rem($minSize) "," $flyValue "," rem($startSize) ")"};
	// Если отрицательные значения
	@if ($minSize > $startSize) {
		$propertyValue: #{"clamp(" rem($startSize) "," $flyValue "," rem($minSize) ")"};
	}

	// Если поддерживается clamp();
	@supports (#{$property}: $propertyValue) {
		#{$property}: $propertyValue;
	}
	// Если не поддерживается clamp();
	@supports not (#{$property}: $propertyValue) {
		#{$property}: calc(#{rem($minSize)} + #{$addSize} * (100vw - #{rem($widthTo)}) / #{calc($widthFrom / 16) - calc($widthTo / 16)});
	}

	// Устанавливаем значения по умолчанию
	@if $widthFrom != $containerWidth and $widthFrom != $maxWidth and $keepSize != 1 and $keepSize != 2 {
		@media (min-width: $widthFromMedia) {
			#{$property}: inherit;
		}
	}
	@if $widthTo != $minWidth and $keepSize != 1 and $keepSize != 3 {
		@media (max-width: $widthToMedia) {
			#{$property}: inherit;
		}
	}
}
